#!/bin/bash
# -------------------------------------------------------------------------
#  When I sit down to work, I need to remember what I did during my last
#  session. Of course, in order to help me remember tomorrow, I need to
#  write down what I do today.
#
#  This script helps out. Simply run it via: `note`
#  and enter in a label that describes the work you plan on doing. Usually
#  some sort of bug ID or task reference (as long as it doesn't have any
#  spaces, it should work).
#
#  If the work is continuing what you did yesterday (the last time you ran
#  the script, then it will bring that information up in your editor,
#  along with a new file.
#
#  Another directory with filenames of dates are symbolic links to these
#  files. This allows you to quickly find them.
#
#  You don't have to run this with any parameters, but you can use:
#
#  -l  The label (note name). If not given, it will prompt for it
#  -d  Specifies the main directory that will store all the subdirectories
#  -g  The 'grouping' is the directory that stores the individual files.
#      This defaults to "work"
#  -e  The editor to use. Defaults to the $EDITOR variable
#  -t  A "name" to tag all the files (and symbolic links) we create
#  -x  Specifies the extension to use.
#  -v  A *verbose* output of all the files we have ... good at first.
# -------------------------------------------------------------------------

# The openmeta, if available, tags the files on Mac OS X
OPENMETA=`type -p ${OPENMETA:-openmeta}`
EXTENSION="org"

# If you don't give a -g, this is the default directory where to write
# the notes:
GROUP="work"

while getopts "l:d:g:e:t:x:v" o
do
    case "$o" in
        l)  CURRENT_ID="$OPTARG";;
        d)  NOTEDIR="$OPTARG";;
        e)  EDITOR="$OPTARG";;
        g)  GROUP="$OPTARG";;
        t)  TAG="$OPTARG";;
        x)  EXTENSION="$OPTARG";;
        v)  VERBOSE=1;;
        *)  echo >&2 "Usage: $0 [-l label] [-t tag] [-x ext] [-d destination] [-g group_name] [-e editor]"
            exit 1;;
    esac
done
shift $(expr $OPTIND - 1)

WORK_DATE_DEST=${WORK_DATE_DEST:-$NOTEDIR/journal}
WORK_BYID_DEST=${WORK_BYID_DEST:-$NOTEDIR/$GROUP}
mkdir -p "$WORK_DATE_DEST"
mkdir -p "$WORK_BYID_DEST"

# Store the latest label used, so that we can have a good default:
CURRENT_ID_FILE="${WORK_BYID_DEST}/.current_id"

if [ -z "$CURRENT_ID" ]
then
# Prompt for a "label" to use. This is the filename of what we'll write:
    if [ -f "$CURRENT_ID_FILE" ]
    then
        CURRENT_ID=$(cat $CURRENT_ID_FILE)
        echo -n "Enter new '$GROUP' label [${CURRENT_ID}]: "
    else
        CURRENT_ID="work"
        echo -n "Enter new '$GROUP' label, e.g. ORDERS-883: "
    fi

    read answer

    if [ -n "$answer" ]
    then
        CURRENT_ID="$answer"
    fi
fi

# -----------------------
# We need to create a unique filename with a _01 or _04
# appended to the end of the name (but before the extension).

function uniqueFilename() {
    DIR=$1
    FILENAME=$2

    NUM=1
    FULLNUM=01

    while [ -L ${DIR}/${FILENAME}_${FULLNUM}.* -o -e ${DIR}/${FILENAME}_${FULLNUM}.* ]
    do
        NUM=`expr $NUM + 1`
        FULLNUM=$(printf "%02d" $NUM)
    done
    echo "${DIR}/${FILENAME}_${FULLNUM}.${EXTENSION}"
}

# -----------------------
# Create the file. Right now, this is blank, but we could pre-populate it
# with some sort of template....

FILENAME_WORK=$(uniqueFilename "$WORK_BYID_DEST" "$CURRENT_ID")
touch "$FILENAME_WORK"

# Store the general name of this file (the label) in the ID File:
echo -n "$CURRENT_ID" > "$CURRENT_ID_FILE"

# Create a symbolic link to this new file with a filename of "today's date":

TODAY=$(date '+%Y-%m-%d')
FILENAME_DATE=$(uniqueFilename "$WORK_DATE_DEST" "$TODAY")

ln -s ../$GROUP/`basename "$FILENAME_WORK"` "$FILENAME_DATE"

# Create another symbolic link based on the day of the week. This is helpful
# for reading "what did I do last friday..."

DAY=$(date +%A | tr 'A-Z' 'a-z')
rm -f "$WORK_DATE_DEST/$DAY"
ln -s `basename "$FILENAME_DATE"` "$WORK_DATE_DEST/$DAY"

# The last entry we've created will always be readable by the "latest"
# symbolic link...

rm -f "$WORK_BYID_DEST/latest"
ln -s `basename "$FILENAME_WORK"` "$WORK_BYID_DEST/latest"

# --------------------------------
# Tag 'em with the same ID...
if [ -f "$OPENMETA" ]
then
    $OPENMETA -a $CURRENT_ID -p "$FILENAME_DATE"  >/dev/null
    $OPENMETA -a $CURRENT_ID -p "$FILENAME_WORK"  >/dev/null

    if [ -n "$TAG" ]
    then
        $OPENMETA -a $TAG -p "$FILENAME_DATE"  >/dev/null
        $OPENMETA -a $TAG -p "$FILENAME_WORK"  >/dev/null
    fi
fi

# ----------------------------------
# Now we want to edit the *last two* file entries. We know the latest
# because we will store that filename is a file called .latest

if [ -f "$WORK_BYID_DEST/.latest" ]
then
    FILES=$(cat "$WORK_BYID_DEST/.latest")
fi

echo -n "$FILENAME_WORK" > "$WORK_BYID_DEST/.latest"

# This is only helpful at first when you are getting the feel for all
# of the files and symbolic links this script creates.

if [ -n "$VERBOSE" ]
then
    echo "$WORK_DATE_DEST :"
    ls -l "$WORK_DATE_DEST"
    echo "$WORK_BYID_DEST :"
    ls -l "$WORK_BYID_DEST"
fi

# Whew ... it is about time we started our editor, eh?
exec ${EDITOR:-aquamacs} "$FILES" "$FILENAME_WORK"
